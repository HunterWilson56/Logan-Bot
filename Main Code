const Discord = require("discord.js");
const client = new Discord.Client();
const mentionHook = new Discord.WebhookClient("Webhook id", "Webhook Token");
const moment = require("moment");
const config = require("./config.json");
const settings = require("./settings.json");

var embed = new Discord.RichEmbed();
const randomColor = "#000000".replace(/0/g, function () { return (~~(Math.random() * 16)).toString(16); });
//const Manager = new Discord.ShardingManager('./index.js');
//Manager.spawn(2); 
const tools = require("./eval.js");
client.on("ready", function() {
    var clientonmessage = `
------------------------------------------------------
> Logging in...
------------------------------------------------------
Logged in as ${client.user.tag}
Working on ${client.guilds.size} servers!
${client.channels.size} channels and ${client.users.size} users cached!
I am logged in and ready to roll!
LET'S GO!
------------------------------------------------------
----------Bot created by Tea Cup#3433-----------
------------------------------------------------------
-----------------Bot's commands logs------------------`

    console.log(clientonmessage);
    client.user.setGame(
        `l.help | on ${client.guilds.size} servers|Vrs;1.6.2`,
        "https://www.twitch.tv/xxwilsongamingxx"
      );
});//l.help | on ${client.guilds.size} servers|Vrs;1.6.2



client.on("guildCreate", guild => {
    console.log(`The bot just joined to ${guild.name}, Owned by ${guild.owner.user.tag}  with ${guild.memberCount} members.`);

    var guild = guild.channels.find('name', 'general,chat');

    guild.channel.send(`
Hello there! My original name is \`Logan\`!\n\
This bot created by **Tea Cup#3343**\n\
For more info type \`l.help\`!\n\
\`Logan's - Official Server:\` https://discord.gg/6mvvfSm`);
});



client.on('guildMemberAdd', member => {
  
    // Send the message to a designated channel on a server:
    const channel = member.guild.channels.find('name', 'welcome');
    // Do nothing if the channel wasn't found on this server
    if (!channel) return;

    // Send the message, mentioning the member
    var embed = new Discord.RichEmbed()
    .setAuthor(`${member.user.tag} (${member.id})`, member.user.displayAvatarURL)
    .addField("Welcome To", member.guild.name )
    .setFooter("User Joined")
    .setColor("#42f4b6")
    .setTimestamp()
    channel.send(embed)
  });




const prefix = "l.";






// Logs of the bot leaves a server
client.on("guildDelete", guild => {
    console.log(`The bot has been left ${guild.name}, Owned by ${guild.owner.user.tag}`);
});



client.on("message", async message => {
    if (message.author.bot) return;
    if (message.content.indexOf("l.") !== 0) return;
    const args = message.content.slice("l.".length).trim().split(/ +/g);
    const command = args.shift().toLowerCase();
    if(command === "ping") {
        const m = await message.channel.send("Ping?");
        m.edit(`Pong! Latency is ${m.createdTimestamp - message.createdTimestamp}ms. API Latency is ${Math.round(client.ping)}ms`);
    }
});




// Turn bot off (destroy), then turn it back on

client.on("message", async message => {
  if(message.author.bot) return;
  if(message.channel.type === "dm") return;

  let prefix = "l.";
  let messageArray = message.content.split(" ");
  let cmd = messageArray[0];
  let args = messageArray.slice(1);

  if(cmd === `${prefix}kick`){

    //!kick @daeshan askin for it

    let kUser = message.guild.member(message.mentions.users.first() || message.guild.members.get(args[0]));
    if(!kUser) return message.channel.send("Can't find user!");
    let kReason = args.join(" ").slice(22);
    if(!message.member.hasPermission("ADMINISTRATOR")) return message.channel.send("No can do pal!");
    if(kUser.hasPermission("ADMINISTRATOR")) return message.channel.send("That person can't be kicked!");

    let kickEmbed = new Discord.RichEmbed()
    .setDescription("~Kick~")
    .setColor(randomColor)
    .addField("Kicked User", `${kUser} with ID ${kUser.id}`)
    .addField("Kicked By", `<@${message.author.id}> with ID ${message.author.id}`)
    .addField("Kicked In", message.channel)
    .addField("Tiime", message.createdAt)
    .addField("Reason", kReason);

    let kickChannel = message.guild.channels.find(`name`, "mod-log");
    if(!kickChannel) return message.channel.send("Can't find `mod log` channel.");

    message.guild.member(kUser).kick(kReason);
    kickChannel.send(kickEmbed);

    return;
  }

  if(cmd === `${prefix}ban`){

    let bUser = message.guild.member(message.mentions.users.first() || message.guild.members.get(args[0]));
    if(!bUser) return message.channel.send("Can't find user!");
    let bReason = args.join(" ").slice(22);
    if(!message.member.hasPermission("ADMINISTRATOR")) return message.channel.send("No can do pal!");
    if(bUser.hasPermission("ADMINISTRATOR")) return message.channel.send("That person can't be kicked!");

    let banEmbed = new Discord.RichEmbed()
    .setDescription("~Ban~")
    .setColor(randomColor)
    .addField("Banned User", `${bUser} with ID ${bUser.id}`)
    .addField("Banned By", `<@${message.author.id}> with ID ${message.author.id}`)
    .addField("Banned In", message.channel)
    .addField("Time", message.createdAt)
    .addField("Reason", bReason);

    let incidentchannel = message.guild.channels.find(`name`, "mod-log");
    if(!incidentchannel) return message.channel.send("Can't find `mod-log` channel.");

    message.guild.member(bUser).ban(bReason);
    incidentchannel.send(banEmbed);


    return;
  }



  if(cmd === `${prefix}Commands`){

    let bicon = client.user.displayAvatarURL;
    let botembed = new Discord.RichEmbed()
    .setDescription("Commands For Logan Bot!")
    .setColor(randomColor)
    .setThumbnail(bicon)
    .addField("Main Commands",'|``l.hi``|``l.invite``|``l.info``|\n|``l.help``|``l.yt``|``l.games``|\n |``l.suggest`|``l.ping``|``l.afk``|\n |``l.web``|``l.vote``|``l.stats``|\n |``l.log``|``l.roll`` |``l.autow``|\n |``l.8ball``|``~weather``|``l.serverinfo``|\n |``l.botinfo``|``l.userinfo``|``l.uptime``| \n|``l.softban``|``l.ownerhelp``|``l.mute``|  More Coming`` ')
    .addField("Moderation",'l.modhelp' )
    .addField("Developer Only",'l.ownerhelp')
    .addField("Level Command", 'Error404 This is not available to he public');

    return message.channel.send(botembed);
}

});



client.on("message", (message) => {
  if (message.author.id === client.user.id || message.author.bot) return;
  if (message.isMentioned("338192747754160138") || message.mentions.everyone || (message.guild && message.mentions.roles.filter(r => message.guild.member("338192747754160138").roles.has(r.id)).size > 0)) {
      if (message.author.id === "338192747754160138") return;
      // Additional Code
      mentionHook.send("You were mentioned!");
  }
  let args = message.content.split(" ").slice(1);
  if (message.content.startsWith(`${prefix} ping`)) {
    message.channel.send("pong!");
  }
});

client.on("message", async message => {
  if (message.author.equals(client.user)) return;

  if (!message.content.startsWith(settings.botPREFIX)) return;

  //Disables commands in a private chat
  if  (message.channel.type == "dm") return console.log(`${message.author.tag} tried to use a command in DM!`);

  //Users blacklist
  if (message.author.id == "") return console.log(`[BlackList] ${message.author.tag} tried to use a command!`);

  //Channels blacklist
  if (message.channel.id == "") return;

  //Servers blacklist
  if (message.guild.id == "") return;

  var args = message.content.substring(settings.botPREFIX.length).split(" ");
  switch (args[0]) {
    case "ping":
        console.log(`${message.author.tag} used the ${settings.botPREFIX}ping command!`);
        message.reply("Pong!");
    break;

    case "botinfo":
    console.log(`${message.author.tag} used the ${settings.botPREFIX}botinfo command!`);

    message.channel.send({embed: {
        color: 3447003,
        title: "Info:",
        description: "This is the info about the bot",
        fields: [{
            name: "Created by:",
            value: "This bot created by Tea Cup#3343"
          },
          {
            name: "Made with:",
            value: "This bot made with [Discord.JS](http://discord.js.org)"
          },
          {
            name: "Contact me:",
            value: "_**Tea Cup#3343**_"
          },
          {
            name: "Social Media",
            value: " **Soon**"
          },
          {
            name: "Invite the bot here",
            value: ":robot: **l.invite**"
          }
        ],
        timestamp: new Date(),
        footer: {
          icon_url: client.user.avatarURL,
          text: "Â© Logan 2018"
        }
      }
    });

    case "userinfo":
    console.log(`${message.author.tag} used the ${settings.botPREFIX}userinfo command!`);

    let user = message.mentions.users.first();
    if (!user) {
        return message.reply('You must mention someone!');
    }
    const mentioneduser = message.mentions.users.first();
    const joineddiscord = (mentioneduser.createdAt.getDate() + 1) + '-' + (mentioneduser.createdAt.getMonth() + 1) + '-' + mentioneduser.createdAt.getFullYear() + ' | ' + mentioneduser.createdAt.getHours() + ':' + mentioneduser.createdAt.getMinutes() + ':' + mentioneduser.createdAt.getSeconds();
    let game;
    if (user.presence.game === null) {
        game = 'Not currently Playing.';
    } else {
        game = user.presence.game.name;
    }
    let messag;
    if (user.lastMessage === null) {
        messag = 'He didnt sent a message.';
    } else {
        messag = user.lastMessage;
    }
    let status;
    if (user.presence.status === 'online') {
        status = ':green_heart:';
    } else if (user.presence.status === 'dnd') {
        status = ':heart:';
    } else if (user.presence.status === 'idle') {
        status = ':yellow_heart:';
    } else if (user.presence.status === 'offline') {
        status = ':black_heart:';
    }
  // Let afk;
  // if (user.presence.data.afk === true) {
  //   afk = "â"
  // } else {
  //   afk = "â"
  // }
    let stat;
    if (user.presence.status === 'offline') {
        stat = 0x000000;
    } else if (user.presence.status === 'online') {
        stat = 0x00AA4C;
    } else if (user.presence.status === 'dnd') {
        stat = 0x9C0000;
    } else if (user.presence.status === 'idle') {
        stat = 0xF7C035;
    }
  message.channel.send({embed: {
    color: 3447003,
    author: {
      name: `Got some info about ${user.username}`,
      icon_url: user.displayAvatarURL
    },
    fields: [{
        name: '**UserInfo:**',
        value: `**Username:** ${user.tag}\n**Joined Discord:** ${joineddiscord}\n**Last message:** ${messag}\n**Playing:** ${game}\n**Status:** ${status}\n**Bot?** ${user.bot}`
      },
      {
        name: 'DiscordInfo:',
        value: `**Discriminator:** ${user.discriminator}\n**ID:** ${user.id}\n**Username:** ${user.username}`
      },
    ],
    timestamp: new Date(),
    footer: {
      icon_url: client.user.avatarURL,
      text: "Â© Logan 2018"
    }
  }
});
    break;

    case "avatar":
    console.log(`${message.author.tag} used the ${settings.botPREFIX}avatar command!`);
    
    if(message.mentions.users.first()) { //Check if the message has a mention in it.
        let user = message.mentions.users.first(); //Since message.mentions.users returns a collection; we must use the first() method to get the first in the collection.
        let output = user.username + "#" + user.discriminator /*Username and Discriminator*/ +
        "\nAvatar URL: " + user.avatarURL; /*The Avatar URL*/
        message.channel.sendMessage(output); //We send the output in the current channel.
  } else {
        message.reply("Please mention someone :thinking:"); //Reply with a mention saying "Invalid user."
  }
    break;

    case "uptime":
    console.log(`${message.author.tag} used the ${settings.botPREFIX}uptime command!`);

    let ms = client.uptime;
    let cd = 24 * 60 * 60 * 1000; // Calc days
    let ch = 60 * 60 * 1000; // Calc hours
    let cm = 60 * 1000; // Calc minutes
    let cs = 1000; // Calc seconds
    let days = Math.floor(ms / cd);
    let dms = days * cd; // Days, in ms
    let hours = Math.floor((ms - dms) / ch);
    let hms = hours * ch; // Hours, in ms
    let minutes = Math.floor((ms - dms - hms) / cm);
    let mms = minutes * cm; // Minutes, in ms
    let seconds = Math.round((ms - dms - hms - mms) / cs);
    if (seconds === 60) {
        minutes++; // Increase by 1
        seconds = 0;
    }
    if (minutes === 60) {
        hours++; // Inc by 1
        minutes = 0;
    }
    if (hours === 24) {
        days++; // Increase by 1
        hours = 0;
    }
    let dateStrings = [];

    if (days === 1) {
        dateStrings.push('**1** day');
    } else if (days > 1) {
        dateStrings.push('**' + String(days) + '** days');
    }

    if (hours === 1) {
        dateStrings.push('**1** hour');
    } else if (hours > 1) {
        dateStrings.push('**' + String(hours) + '** hours');
    }

    if (minutes === 1) {
        dateStrings.push('**1** minute');
    } else if (minutes > 1) {
        dateStrings.push('**' + String(minutes) + '** minutes');
    }

    if (seconds === 1) {
        dateStrings.push('**1** second');
    } else if (seconds > 1) {
        dateStrings.push('**' + String(seconds) + '** seconds');
    }

    let dateString = '';
    for (let i = 0; i < dateStrings.length - 1; i++) {
        dateString += dateStrings[i];
        dateString += ', ';
    }
    if (dateStrings.length >= 2) {
        dateString = dateString.slice(0, dateString.length - 2) + dateString.slice(dateString.length - 1);
        dateString += 'and ';
    }
    dateString += dateStrings[dateStrings.length - 1];

  message.channel.send({embed: {
    color: 3447003,
    fields: [{
        name: ':clock: Uptime',
        value: 'Bot\'s uptime'
      },
      {
        name: ":runner: Working in:",
        value: `**${client.guilds.size}** servers`
      },
      {
        name: ":white_check_mark: Online for:",
        value: dateString
      }
    ],
    timestamp: new Date(),
    footer: {
      icon_url: client.user.avatarURL,
      text: "Â© Logan 2018"
    }
  }
});
    break;

  case "modhelp":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}modhelp command!`);

  message.reply("Please check your direct messages :inbox_tray: (Moderation commands.)");

  message.author.send({embed: {
      color: 3447003,
      author: {
        name: client.user.username,
        icon_url: client.user.avatarURL
      },
      title: "Bot's commands",
      fields: [{
          name: "Moderation commands",
          value: `**${settings.botPREFIX}ban** - Bans a user from your server! (Moderators only!)\n\
**${settings.botPREFIX}kick** - Kicks a user out of the server! (Mederation only!)\n\
**${settings.botPREFIX}mute** - Muted a user with a **muted** role! (Moderation only!)\n\
**${settings.botPREFIX}unmute** - Unmutes a user and removes the **muted** role. (Moderation only!)\n\
**${settings.botPREFIX}softban** - Kicks a user and deletes his messages. (Moderation only!)`
        }
      ],
      timestamp: new Date(),
      footer: {
        icon_url: client.user.avatarURL,
        text: "Â© Logan 2018"
      }
    }
  });
  break;
  case "serverinfo":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}serverinfo command!`);

  let guildmessageServerInfo = message.guild;
  let nameServerInfo = message.guild.name;
  let createdAtServerInfo = moment(message.guild.createdAt).format('MMMM Do YYYY, h:mm:ss a');
  let channelsServerInfo = message.guild.channels.size;
  let ownerServerInfo = message.guild.owner.user.tag;
  let memberCountServerInfo = message.guild.memberCount;
  let largeServerInfo = message.guild.large;
  let iconUrlServerInfo = message.guild.iconURL;
  let regionServerInfo = message.guild.region;
  let afkServerInfo = message.guild.channels.get(message.guild.afkChannelID) === undefined ? 'None' : message.guild.channels.get(guildmessageServerInfo.afkChannelID).name;

      message.channel.send({embed: {
          color: 3447003,
          author: {
            name: message.guild.name,
            icon_url: message.guild.displayAvatarURL
          },
          title: "Server Information",
          fields: [{
              name: "Channels",
              value: `**Channel Count:** ${channelsServerInfo}\n**AFK Channel:** ${afkServerInfo}`
            },
            {
              name: "Members",
              value: `**Member Count:** ${memberCountServerInfo}\n**Owner:** ${ownerServerInfo}\n**Owner ID:** ${message.guild.owner.id}`
            },
            {
              name: "More",
              value: `**Created at:** ${createdAtServerInfo}\n**Large Guild?:** ${largeServerInfo ? 'Yes' : 'No'}\n**Region:** ${regionServerInfo}`
            }
          ],
          timestamp: new Date(),
          footer: {
            icon_url: client.user.avatarURL,
            text: "Â© Logan 2018"
          }
        }
      });

  break;

  case "botservers":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}botservers command!`);

  let Table = require(`cli-table`);
  let table = new Table({
      head: [
          `ID`,
          `Name`,
          `Users`,
          `Bots`,
          `Total`
      ], colWidths: [30, 50, 10, 10, 10]
  });
  client.guilds.map(g =>
    table.push(
      [g.id, g.name, g.members.filter(u => !u.user.bot).size, g.members.filter(u => u.user.bot).size, g.members.size]
    ));
  require(`snekfetch`)
  .post(`https://hastebin.com/documents`)
  .set(`Content-Type`, `application/raw`)
  .send(table.toString())
  .then(r =>
     message.channel.send(`Im inside these servers! http://hastebin.com/` + r.body.key));
  break;

  case "botping":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}botping command!`);

  message.channel.send({embed: {
      color: 3447003,
      author: {
        name: client.user.username,
        icon_url: client.user.avatarURL
      },
      fields: [{
          name: "Bot's ping:",
          value: `\`${client.ping}ms\``
        }
      ],
      timestamp: new Date(),
      footer: {
        icon_url: client.user.avatarURL,
        text: "Â© Logan 2018"
      }
    }
  });
  break;
  case "softban":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}softban command!`);

  let reasonSoftban = message.content.split(' ').slice(3).join(' ');
  let timeSoftban = message.content.split(' ')[2];
  let guildSoftban = message.guild;
  let modlogSoftban = message.guild.channels.find('name', 'mod-log');
  let userSoftban = message.mentions.users.first();
  if (!message.guild.member(message.author).hasPermission('BAN_MEMBERS')) {
      return message.reply(':lock: You need to have `BAN_MEMBERS` Permission to execute `SoftBan`');
  }
  if (!message.guild.member(client.user).hasPermission('BAN_MEMBERS')) {
      return message.reply(':lock: I need to have `BAN_MEMBERS` Permission to execute `SoftBan`');
  }
  if (!modlogSoftban) {
      return message.reply('I need a text channel named `mod-log` to print my ban/kick logs in, please create one');
  }
  if (message.author.id === userSoftban.id) {
      return message.reply('You cant punish yourself :wink:');
  }
  if (message.mentions.users.size < 1) {
      return message.reply('You need to mention someone to SoftBan him!');
  }
  if (!reasonSoftban) {
      return message.reply(`You must give me a reason for the ban **Usage:**\`l.softban [@mention] [example]\``);
  }
  userSoftban.send(`You've just got softbanned from ${guildSoftban.name}  \n State reason: **${reasonSoftban}** \n **Disclamer**: In a softban you can come back straight away, we just got your messages deleted`);
  message.guild.ban(userSoftban, 2);
  setTimeout(() => {
      message.guild.unban(userSoftban.id);
  }, 0);

  modlogSoftban.send({embed: {
      color: 0x18FE26,
      author: {
        name: client.user.username,
        icon_url: client.user.avatarURL
      },
      fields: [{
          name: "Softban:",
          value: `**Softbanned:** ${userSoftban.username}#${userSoftban.discriminator}\n**Moderator:** ${message.author.username}\n**Reason:** ${reasonSoftban}`
        }
      ],
      timestamp: new Date(),
      footer: {
        icon_url: client.user.avatarURL,
        text: "Â© Logan 2018"
      }
    }
  });
  break;
  case "botname":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}botname command!`);

  const botusername = message.content.split(' ').slice(1).join(' ');

  if (message.author.id == settings.ownerID) {
      client.user.setUsername(botusername);
      message.reply('Done. :ok_hand:');
  } else {
      message.delete();
      message.channel.send(`\`ð\` You don't have permissions to execute that command.`);
  }
  break;

  case "botavatar":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}botavatar command!`);

  const botavatar = message.content.split(' ').slice(1).join(' ');
  var request = require("request").defaults({ "encoding" : null });

  if (message.author.id == settings.ownerID) {
request(botavatar, function (err, res, body) {
if (!err && res.statusCode === 200) {
  var data = "data:" + res.headers["content-type"] + ";base64," + new Buffer(body).toString("base64");
  client.user.setAvatar(botavatar).catch((error) => { message.channel.send('Beep boop, something went wrong. Check the console to see the error.'); console.log('Error on setavatar command:', error); });

  message.channel.send('Done. :ok_hand:');
}
});
  } else {
      message.delete();
      message.channel.send(`\`ð\` You don't have permissions to execute that command.`);
  }
  break;

  case "botnick":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}botnick command!`);

  const botnickname = message.content.split(' ').slice(1).join(' ');

  if (message.author.id == settings.ownerID){
      message.guild.members.get(client.user.id).setNickname(botnickname);
      message.channel.send('Done. :ok_hand:');
  } else {
      message.delete();
      message.channel.send(`\`ð\` You don't have permissions to execute that command.`);
  }
  break;

  case "eval":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}eval command!`);

  const clean = text => {
      if (typeof(text) === "string")
        return text.replace(/`/g, "`" + String.fromCharCode(8203)).replace(/@/g, "@" + String.fromCharCode(8203));
      else
          return text;
    }

      const evalargs = message.content.split(" ").slice(1);

        if (message.author.id == settings.ownerID || message.author.id == '153478211207036929') {
        try {
          const code = evalargs.join(" ");
          let evaled = eval(code);

          if (typeof evaled !== "string")
            evaled = require("util").inspect(evaled);

          message.channel.send(clean(evaled), {code:"xl"});
        } catch (err) {
          message.channel.send(`\`ERROR\` \`\`\`xl\n${clean(err)}\n\`\`\``);
        }
      } else {
          message.delete();
          message.channel.send(`\`ð\` You don't have permissions to execute that command.`);
      };
  break;

  case "say":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}say command!`);

  const botsay = message.content.split(' ').slice(1).join(' ');

  if (message.author.id == settings.botPREFIX || message.author.id == "338192747754160138")
  {
      message.delete();
      message.channel.send(botsay);
  } else {
      message.delete();
      message.channel.send(`\`ð\` You don't have permissions to execute that command.`);
  }
  break;

  case "shutdown":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}shutdown command!`);

  if (message.author.id == settings.ownerID || message.author.id == "153478211207036929") {
          const filterYes = m => m.content.startsWith('yes');
          message.reply('Shutting down... :skull:')
          .then(m => {
              process.exit()
          });
  } else {
      message.delete();
      message.channel.send(`\`ð\` You don't have permissions to execute that command.`);
  }
  break;

  case "ownerhelp":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}ownerhelp command!`);

  if (message.author.id == settings.ownerID) {
      message.reply("Please check your direct messages :inbox_tray: (Owner commands.)");

      message.author.send({embed: {
          color: 3447003,
          author: {
            name: client.user.username,
            icon_url: client.user.avatarURL
          },
          title: "Bot's commands",
          fields: [{
              name: "Bot's owner commands",
              value: `**${settings.botPREFIX}botname** - Changes the bot's username. **Usage: ${settings.botPREFIX}botname [NAME]**\n\
**${settings.botPREFIX}botavatar** - Changes the bot's avatar. **Usage: ${settings.botPREFIX}botavatar [LINK]**\n\
**${settings.botPREFIX}botnick** - Changed the nickname in a server. **Usage: ${settings.botPREFIX}botnick [NICKNAME]**\n\
**${settings.botPREFIX}eval** - Evaluates a code. **Usage: ${settings.botPREFIX}eval [CODE]**\n\
**${settings.botPREFIX}shutdown** - Closes the CMD window!\n\
**${settings.botPREFIX}say** - Give the bot something to say!`
            }
          ],
          timestamp: new Date(),
          footer: {
            icon_url: client.user.avatarURL,
            text: "Â© Logan 2018"
          }
        }
      });
  } else {
      message.delete();
      message.channel.send(`\`ð\` Only the owner of the bot can use this command.`);
  }
  break;
  case "mute":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}mute command!`);

  if (!message.guild.member(message.author).hasPermission('MUTE_MEMBERS')) {
      message.channel.send(':lock: **I** need `MANAGE_ROLES` Permissions to execute `mute`');
      return;
  }

  if (!message.guild.member(client.user).hasPermission('MANAGE_ROLES')) {
      return message.reply(':lock: **I** need `MANAGE_ROLES` Permissions to execute `mute`')
  }
  const msmute = require('ms');
  let reasonMute = message.content.split(' ').slice(3).join(' ');
  let timeMute = message.content.split(' ')[2];
  let guildMute = message.guild;
// Let adminRoleMute = guild.roles.find("name", "TOA");
  let memberMute = message.guild.member;
  let modlogMute = message.guild.channels.find('name', 'mod-log');
  let userMute = message.mentions.users.first();
  let muteRoleMute = client.guilds.get(message.guild.id).roles.find('name', 'Muted');
  if (!modlogMute) {
      return message.reply('I need a text channel named `mod-log` to print my ban/kick logs in, please create one');
  }

  if (!muteRoleMute) {
      return message.reply('`Please create a role called "Muted"`');
  }

  if (message.mentions.users.size < 1) {
      return message.reply('You need to mention someone to Mute .');
  }
  if (message.author.id === userMute.id) {
      return message.reply('You cant punish yourself :wink:');
  }
  if (!timeMute) {
      return message.reply('specify the time for the mute!**Usage:**`l.mute [@mention] [1m] [example]`');
  }
  if (!timeMute.match(/[1-60][s,m,h,d,w]/g)) {
      return message.reply('I need a valid time ! look at the Usage! right here: **Usage:**`l.mute [@mention] [1m] [example]`');
  }
  if (!reasonMute) {
      return message.reply('You must give me a reason for Mute **Usage:**`l.mute [@mention] [15m] [example]`');
  }
  if (reasonMute.time < 1) {
      return message.reply('TIME?').then(message => message.delete(2000));
  }
  if (reasonMute.length < 1) {
      return message.reply('You must give me a reason for Mute');
  }
  message.guild.member(userMute).addRole(muteRoleMute)

  setTimeout(() => {
      message.guild.member(userMute).removeRole(muteRoleMute)
  }, msmute(timeMute));
  message.guild.channels.filter(textchannel => textchannel.type === 'text').forEach(cnl => {
      cnl.overwritePermissions(muteRoleMute, {
          SEND_MESSAGES: false
      });
  });

  message.reply("This user has been muted.");

  modlogMute.send({embed: {
      color: 16745560,
      author: {
        name: client.user.username,
        icon_url: client.user.avatarURL
      },
      fields: [{
          name: 'Mute',
          value: `**Muted:**${userMute.username}#${userMute.discriminator}\n**Moderator:** ${message.author.username}\n**Duration:** ${msmute(msmute(timeMute), {long: true})}\n**Reason:** ${reasonMute}`
        }
      ],
      timestamp: new Date(),
      footer: {
        icon_url: client.user.avatarURL,
        text: "Â© Logan 2018"
      }
    }
  });
  break;

  case "unmute":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}unmute command!`);

  let guildUnmute = message.guild;
  let argsUnmute = message.content.split(' ').slice(1);
  let argresultUnmute = args.join(' ');
  let reasonUnmute = args;
  if (!message.guild.member(message.author).hasPermission('MANAGE_ROLES')) {
      return message.reply(':lock: **I** need `MANAGE_ROLES` Permissions to execute `mute`')
  }
  if (!message.guild.member(client.user).hasPermission('MANAGE_ROLES')) {
      return message.reply(':lock: **I** need `MANAGE_ROLES` Permissions to execute `mute`')
  }
  let userUnmute = message.mentions.users.first();
  let muteRoleUnmute = client.guilds.get(message.guild.id).roles.find('name', 'muted');
  if (message.mentions.users.size < 1) {
      return message.reply('You need to mention someone to unmute him!.');
  }
  message.guild.member(userUnmute).removeRole(muteRoleUnmute).then(() => {
      message.reply(`You've succesfully unmuted ${userUnmute}`);
  });
  break;

  case "bluehelp":
  console.log(`${message.author.tag} used the ${settings.botPREFIX}bluehelp command!`);

  if (message.author.id == '338192747754160138') {
      message.reply('Hello there my lord! Check your DM :wink:');

      message.author.send({embed: {
          color: 3447003,
          author: {
            name: client.user.username,
            icon_url: client.user.avatarURL
          },
          title: "Bot's commands",
          fields: [{
              name: "City Guards dev commands",
              value: `**${settings.botPREFIX}todo** - Shows Blue Malgeran's TODO list.\n\
**${settings.botPREFIX}eval** - Evaluates a code.\n\
**${settings.botPREFIX}shutdown** - Closes the CMD window.\n\
**${settings.botPREFIX}say** - Give the bot something to say!`
            }
          ],
          timestamp: new Date(),
          footer: {
            icon_url: client.user.avatarURL,
            text: "Â© Logan 2018"
          }
        }
      });
  } else {
      message.delete();
      message.channel.send(`\`ð\` You're not allowed to execute this command, only my lord can use this command!\n\
      \`Lord: Tea Cup#3343\``);
  }
  }
});

client.login('SUPERSECRETE_BOTTOKEN');
